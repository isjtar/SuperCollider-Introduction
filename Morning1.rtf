{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red96\green96\blue96;
\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs34 \cf2 // this posts into the post window\cf3 \
\
(\
\cf2 // global variables a -> z don't use s \cf3 \
\cf2 // more than 5 is hard to remember\cf3 \
\
a = \cf4 "hello world"\cf3 ;\
a.postln;\
\
a = 3;\
a.postln;\
\
\cf2 // environment vars start with ~\cf3 \
~myNumber = 3.1;\
\
\
\cf2 // operators\cf3 \
a + (~myNumber * 10);\
a = 3;\
b = 4;\
\
\cf2 // = -> assignment NOT an operator\cf3 \
\cf2 // == -> equals\cf3 \
\cf2 // != -> does not equal\cf3 \
  \
a != b;\
a.class\
\cf2 // types\cf3 \
\cf2 // !! classes are the only thing that starts with a capital\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1 \cf3 1.class == \cf5 Integer\cf3 ;\
2.1.class == \cf5 Float\cf3 ;\
\cf4 "a string"\cf3 .class == \cf5 String\cf3 ; \
\
\{\}.class == \cf5 Function\cf3 ;\
\cf2 // definition / assignment\cf3 \
~myFunc = \{a * b\};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs32 \cf3 ~myFunc.value;
\fs34 \
\

\fs30 \cf2 // takes arguments\cf3 \
\cf2 // alternative: ~myFunc = \{arg myArgument; myArgument * b\};\cf3 \
\
b = 2;\
\
( \cf2 // two arguments\cf3 \
~myFunc = \{\
	\cf5 |myArgument1, myArgument2|\cf3  \
	\cf2 // the last result is returned\cf3 \
	myArgument1 * myArgument2;\
\};\
\
\cf2 // evaluate\cf3 \
~myFunc.value(10, 11);\
\
\cf2 // a new type: Array\cf3 \
\cf2 // an Array is an ordered list \cf3 \
a = [\cf4 "C4"\cf3 , \cf4 "G4"\cf3 , \cf4 "A5"\cf3 ];
\fs32 \
\cf2 //you index an Array[indexNumber] -> starts at 0
\fs34 \cf3 \

\fs32 a[0];
\fs34 \
a[1];\
a[2];\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs30 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // iteration -> running over something doing it one by one\cf3 \
5.do\{\cf5 |i|\cf3  (i * 10).postln\};\
a.do\{\cf5 |o, i|\cf3  o.postln; i.postln\}\
\
\cf2 // SOUND\cf3 \
s.boot; \cf2 // server boot\cf3 \
\
\cf2 // server - lang divide  \cf3 \
\cf2 // SinOsc = UGen\cf3 \
\cf2 // .ar means audiorate != .kr -> control rate\cf3 \
\cf2 // multiply changes amplitude\cf3 \
\cf2 /*  */\cf3  multiline comments\
\
a = \{\cf5 SinOsc\cf3 .ar(200) * \cf5 SinOsc\cf3 .ar(0.2)\}.play; \cf2 // modulating amp\cf3 \
a = \{\cf5 SinOsc\cf3 .ar(\cf5 SinOsc\cf3 .ar(0.2).range(20, 18000))\}.play; \cf2 // modulating freq\cf3 \
\cf2 // make code blocks with parenthesis\cf3 \
(\
a = \{\
	\cf5 var\cf3  baseFreq, modulator, sig; \
	baseFreq = 600;\
	modulator = \cf5 SinOsc\cf3 .ar(2).exprange(400, 600);\
	sig = \cf5 SinOsc\cf3 .ar(baseFreq + modulator);\
\}.play\
)\
\
( \cf2 // two arguments\cf3 \
\cf5 var\cf3  myFunc;\
~myFunc = \{\
	\cf5 |myArgument1, myArgument2|\cf3  \
	\cf2 // the last result is returned\cf3 \
	myArgument1 * myArgument2;\
\};\
~myFunc.value(2,2);\
\
)\
\
\
a.free;\
a.value
\f1 ()
\f0 \
\
\cf2 // to stop sound hit CMD + . \cf3 \
\
\
~myOsc = \{\cf5 SinOsc\cf3 .ar(200)\};\
~myOsc2 = \{\cf5 SinOsc\cf3 .ar(700)\};\
~myArray = [~myOsc, ~myOsc2];\
~myArray[1].play;\
\
~myFunc = \{\
	\cf5 |freq, ampModFreq|\cf3  \
	\cf5 SinOsc\cf3 .ar(freq) * \cf5 SinOsc\cf3 .kr(ampModFreq);\
\};\
\
\cf2 // random numbers\cf3 \
rrand(0.1,1);\
exprand(20, 18000);\
\
\cf2 // just some examples to show iteration, very dirty function spawning\cf3 \
\cf2 // random freqs, scaled(*) to avoid clipping\cf3 \
100.do\{\{\cf5 SinOsc\cf3 .ar(exprand(20, 18000)) * \cf5 SinOsc\cf3 .ar(rrand(0.1, 1)) * 0.1\}.play\};\
\
\cf2 // using the iterator -> 100 frequencies between 0 and 9999\cf3 \
100.do\{\cf5 |i|\cf3  \{\cf5 SinOsc\cf3 .ar(i * 100) * \cf5 SinOsc\cf3 .ar(rrand(0.1, 1)) * 0.1\}.play\};\
\
\
\
\
\
)\
\
\
\
\
\
\
\
\
\

\fs34 \
\
\
\
\
\
\
\
\
\
}