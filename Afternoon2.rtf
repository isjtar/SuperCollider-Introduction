{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf2 // Pattern - Streams - Events\cf3 \
\cf2 // shortest code in SC that makes sound\cf3 \
().class == \cf4 Event\cf3 ;\
().play\
(\
\pard\pardeftab720\ql\qnatural

\fs22 \cf4 SynthDef\cf3 (\cf5 \\smoothSine\cf3 , \{\
	\cf4 |freq = 440, duration = 0.3, amp = 1, pan = 0, gate = 1, out = 0|\cf3 	\
	\cf4 var\cf3  sig, env;\
	env = \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .sine(duration, amp), gate, doneAction:2);\
	sig = \cf4 SinOsc\cf3 .ar(freq) * env;\
	sig = \cf4 Pan2\cf3 .ar(sig, env.range(-1, 1));\
	\cf4 Out\cf3 .ar(out, sig);	\
\}).add; \cf2 // .add means the server knows this\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs28 \cf3 )\
\cf2 // has a default instrument, but can be any SynthDef\cf3 \
\
(instrument:\cf5 \\smoothSine\cf3 ).play; \cf2 // == Synth(\\smoothSine);\cf3 \
\
\cf2 // has built in facilities for pitch, amplitude and durations\cf3 \
\cf2 // this requires some conventions: gate, amp and freq as arguments\cf3 \
\
(freq:440).play\
(degree:2).play\
\cf2 // instead of freq, you can use degree, midinote, define scales\cf3 \
\cf2 // instead of amp, db \cf3 \
\
(instrument:\cf5 \\smoothSine\cf3 , freq:1000).play;\
\
\cf4 Pbind\cf3 ().play; \
\cf4 Pbind\cf3 (\cf5 \\instrument\cf3 , \cf5 \\smoothSine\cf3 ).play; \cf2 // watch out syntaxt symbol, symbol \cf3 \
\cf4 Pbind\cf3 (\cf5 \\instrument\cf3 , \cf5 \\smoothSine\cf3 , \cf5 \\midinote\cf3 , 42).play; \cf2 // watch out syntaxt symbol, symbol \cf3 \
\cf4 Pbind\cf3 (\cf5 \\instrument\cf3 , \cf5 \\smoothSine\cf3 , \cf5 \\midinote\cf3 , 52, \cf5 \\dur\cf3 , 1/4).play; \cf2 // change duration, in beats\cf3 \
\cf2 // scheduled (timed) on SuperCollider's TempoClock\cf3 \
\
( \cf2 // two at once\cf3 \
\cf4 Pbind\cf3 (\cf5 \\instrument\cf3 , \cf5 \\smoothSine\cf3 , \cf5 \\midinote\cf3 , 52, \cf5 \\dur\cf3 , 1/2).play; \cf2 // \cf3 \
\cf4 Pbind\cf3 (\cf5 \\instrument\cf3 , \cf5 \\smoothSine\cf3 , \cf5 \\midinote\cf3 , 80, \cf5 \\dur\cf3 , 1/8).play; \cf2 //\cf3 \
)\
\
\cf2 // whole library of Pattern s that handle and manipulate these streams\cf3 \
\cf2 // example:\cf3 \
\cf4 Pseq\cf3 ([50, 55, 58], \cf4 inf\cf3 ); \
\
\cf2 // we can out this instead of a value\cf3 \
\cf4 Pbind\cf3 (\cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([50, 55, 58], \cf4 inf\cf3 )).play; \cf2 // cycles over array, then number repetitions\cf3 \
\cf4 Pbind\cf3 (\cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([50, \cf4 Pseq\cf3 ([40, 41], 2), 58], 2)).play; \cf2 // can be nested\cf3 \
\

\fs32 (\
\pard\pardeftab720\ql\qnatural

\fs26 \cf4 SynthDef\cf3 (\cf5 \\smoothSine\cf3 , \{\
	\cf4 |freq = 440, duration = 0.3, amp = 1, pan = 0, gate = 1, out = 0|\cf3 	\
	\cf4 var\cf3  sig, env;\
	env = \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .sine(duration, amp), gate, doneAction:2);\
	sig = \cf4 SinOsc\cf3 .ar(freq) * env;\
	sig = \cf4 Pan2\cf3 .ar(sig, env.range(-1, 1));\
	\cf4 Out\cf3 .ar(out, sig);	\
\}).add; \cf2 // .add means the server knows this\cf3 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs32 \cf3 (\
\pard\pardeftab720\ql\qnatural

\fs26 \cf4 SynthDef\cf3 (\cf5 \\smoothNoise\cf3 , \{\
	\cf4 |freq = 440, duration = 0.3, amp = 1, pan = 0, gate = 1, out = 0|\cf3 	\
	\cf4 var\cf3  sig, env;\
	env = \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .sine(duration, amp), gate, doneAction:2);\
\cf2 //	sig = RLPF.ar(WhiteNoise.ar, freq, 0.3) * env; // this line changed\cf3 \
	sig = \cf4 Resonz\cf3 .ar(\cf4 WhiteNoise\cf3 .ar, freq * 2, 0.1, mul:2) * env;\
	sig = \cf4 Pan2\cf3 .ar(sig, env.range(-1, 1));\
	\cf4 Out\cf3 .ar(out, sig);	\
\}).add; \cf2 // .add means the server knows this\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs32 \cf3 )
\fs26 \

\fs32 \

\fs28 \
( \cf2 // kind of experimental sequencer\cf3 \
\cf4 Pbind\cf3 (\
	\cf5 \\instrument\cf3 , \cf4 Prand\cf3 ([\cf5 \\smoothSine\cf3 , \cf5 \\smoothNoise\cf3 ], \cf4 inf\cf3 ), \cf2 // makes rnd choice from array \cf3 \
	\cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([50, 55, 58], \cf4 inf\cf3 ), \
\cf2 //	\\midinote, Pwhite(60, 80, inf),\cf3 \
	\cf5 \\pan\cf3 , \cf4 Pwhite\cf3 (-1, 1, \cf4 inf\cf3 ), \cf2 // random values (min, max, repetitions)\cf3 \
	\cf5 \\dur\cf3 , \cf4 Pseq\cf3 ([1/4, 1/3], \cf4 inf\cf3 )\
).play\
)\
\
(instrument:\cf5 \\smoothNoise\cf3 ).play\
\
\cf2 // on popular request, a simple Fm synth\cf3 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs26 \cf4 SynthDef\cf3 (\cf5 \\simpleFM\cf3 ,\{\
	\cf4 |atk, rel = 0.3, freq, amp = 1, gate = 1, out = 0, modIndex = 1.1, ratio = 1|\cf3 \
	\cf4 var\cf3  car, mod, env;	\
	env = \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(atk,rel), gate, doneAction:2);\
	mod = \cf4 SinOsc\cf3 .ar(freq * ratio) * freq * modIndex * ratio; \cf2 // modulator\cf3 \
	car = \cf4 SinOsc\cf3 .ar(freq + mod) * env; \cf2 // carrier \cf3 \
	\cf4 Out\cf3 .ar([out, out + 1], car * amp);\
\}).add;\
\
\pard\pardeftab560\ql\qnatural
\cf4 SynthDef\cf3 (\cf5 \\simpleDelay\cf3 , \{ \
	\cf4 |in =  42, out = 0, maxdtime = 3, dtime = 0.2, decay = 2, dry_wet = -0.5, amp = 0.1 |\cf3 \
	\cf4 var\cf3  sig, src;\
	src = \cf4 In\cf3 .ar(in); 	\cf2 // higher than the inputs  outputs of sound card\cf3 \
	sig = \cf4 CombL\cf3 .ar(src, maxdtime, dtime, decay, 1);\
	sig = \cf4 XFade2\cf3 .ar(src, sig, dry_wet) * amp;\
	\cf4 Out\cf3 .ar(out, sig)\
\}).add;
\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs26 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs28 \cf3 )\
\
(instrument:\cf5 \\simpleDelay\cf3 , dtime: 0.01, decay: 1).play; \cf2 // Synth(\\simpleDelay);\cf3 \
\
(\
a = \cf4 Pbind\cf3 (\
	\cf5 \\instrument\cf3 , \cf5 \\simpleFM\cf3 ,\
	\cf5 \\freq\cf3 , 1050,\
	\cf5 \\amp\cf3 , 0.5,\
	\cf5 \\ratio\cf3 , \cf4 Pbrown\cf3 (5, 10, 0.1, \cf4 inf\cf3 ), \cf2 // brownian/drunk noise min, max, step,rep\cf3 \
	\cf5 \\modIndex\cf3 , \cf4 Pbrown\cf3 (0, 10, 1, \cf4 inf\cf3 ),\
	\cf5 \\atk\cf3 , \cf4 Pwhite\cf3 (0.001, 1, \cf4 inf\cf3 ),\
	\cf5 \\dur\cf3 , \cf4 Pseq\cf3 ([1/4, 1/4, 1/8], \cf4 inf\cf3 ) * \cf4 Pbrown\cf3 (0.1, 2, 0.01, \cf4 inf\cf3 ), \cf2 // duration in beats, you can do math with patterns on patterns\cf3 \
	\cf5 \\out\cf3 , 0		\cf2 // can send to any bus\cf3 \
);\
\
b = \cf4 Pbind\cf3 (\
	\cf5 \\instrument\cf3 , \cf5 \\simpleFM\cf3 ,\
	\cf5 \\freq\cf3 , 50,\
	\cf5 \\ratio\cf3 , \cf4 Pbrown\cf3 (5, 10, 0.1, \cf4 inf\cf3 ), \cf2 // brownian/drunk noise min, max, step,rep\cf3 \
	\cf5 \\modIndex\cf3 , \cf4 Pbrown\cf3 (0, 10, 1, \cf4 inf\cf3 ),\
	\cf5 \\atk\cf3 , \cf4 Pwhite\cf3 (0.001, 0.1, \cf4 inf\cf3 ),\
	\cf5 \\dur\cf3 , \cf4 Pseq\cf3 ([1/4, 1/4, 1/8], \cf4 inf\cf3 ), \cf2 // duration in beats, you can do math with patterns on patterns\cf3 \
	\cf5 \\out\cf3 , 0		\cf2 // can send to any bus\cf3 \
);\
)\
b.play\
\
\cf4 Ppar\cf3 ([a, b]).play \cf2 // playing in parallel\cf3 \
\
\cf2 // embed, combine and change endlessly\cf3 \
(\
\cf4 Pseq\cf3 ([\
	\cf4 Ppar\cf3 ([\
		\cf4 Pseq\cf3 ([\
			\cf4 Pbind\cf3 (\cf5 \\dur\cf3 , 1/4, \cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([54, 57, 58], 2)),  \
			\cf4 Pbind\cf3 (\cf5 \\dur\cf3 , 1/4, \cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([54, 57, 58] + 3, 3))\
			],1),\
			\
		\cf4 Pseq\cf3 ([\
			\cf4 Pbind\cf3 (\cf5 \\dur\cf3 , 1/8, \cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([54, 57, 58] - 12, 4)),  \
			\cf4 Pbind\cf3 (\cf5 \\dur\cf3 , 1/8, \cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([54, 57, 58] + 3 -12, 6))\
			],1)\
	], 2),\
	\
	\cf4 Ppar\cf3 ([\
		\cf4 Pseq\cf3 ([\
			\cf4 Pbind\cf3 (\cf5 \\dur\cf3 , 1/41, \cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([54, 57, 58] -1, 2 )),  // one semitone lower\
			\cf4 Pbind\cf3 (\cf5 \\dur\cf3 , 1/4, \cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([54, 57, 58] + 3 -1, 3))\
			],1),\
			\
		\cf4 Pseq\cf3 ([\
			\cf4 Pbind\cf3 (\cf5 \\dur\cf3 , 1/8, \cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([54, 57, 58] - 12 -1, 4)),  \
			\cf4 Pbind\cf3 (\cf5 \\dur\cf3 , 1/8, \cf5 \\midinote\cf3 , \cf4 Pseq\cf3 ([54, 57, 58] + 3 -12 -1, 6))\
			],1)\
	], 2), \cf4 inf\cf3 \
]).play\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}